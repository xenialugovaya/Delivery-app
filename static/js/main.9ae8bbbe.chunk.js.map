{"version":3,"sources":["Styles/GlobalStyle.js","Navbar/Navbar.js","FoodCard/FoodCard.js","Data/Data.js","Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","NavbarStyle","styled","div","Logo","NavMenu","Navbar","Grid","container","spacing","item","Icon","color","fontSize","Typography","variant","IconButton","aria-label","Badge","badgeContent","React","Component","useStyles","makeStyles","theme","root","width","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","FoodCard","props","parameters","title","price","shortDescription","description","image","classes","useState","expanded","setExpanded","Card","className","CardHeader","CardMedia","CardContent","component","CardActions","disableSpacing","clsx","onClick","aria-expanded","Collapse","in","timeout","unmountOnExit","paragraph","pizzas","MenuStyle","Menu","map","pizza","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ae8bbbe.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    background: #eee;\n  }\n`","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {Badge} from '@material-ui/core';\nimport { IconButton } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\nimport { Icon } from '@material-ui/core';\nimport LocalPizzaTwoToneIcon from '@material-ui/icons/LocalPizzaTwoTone';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport styled from 'styled-components'\n\n\nconst NavbarStyle = styled.div`\n  background: white;\n  padding: 15px 25px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: 0px 15px 10px -15px #111;    \n`\nconst Logo = styled.div`\n  border-right: 1px solid grey;\n  padding-right: 25px;\n`\n\nconst NavMenu = styled.div`\n  border-left: 1px solid grey;\n  padding-left: 25px;\n`\n\nclass Navbar extends React.Component{\n  render(){\n    return (\n      <NavbarStyle>\n        <Logo>\n         <Grid container spacing={2}>\n            <Grid item>\n              <Icon color=\"primary\">\n                <LocalPizzaTwoToneIcon fontSize=\"large\"/>\n              </Icon>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\">\n                Pizza\n              </Typography>\n              <Typography variant=\"overline\">\n                Delivery\n              </Typography>\n            </Grid>\n          </Grid>\n        </Logo>\n        <NavMenu>\n          <IconButton color=\"primary\" aria-label=\"add to shopping cart\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <AddShoppingCartIcon />\n            </Badge>\n          </IconButton>\n        </NavMenu>\n      </NavbarStyle>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n}));\n\nexport default function FoodCard(props) {\n  const {title, price, shortDescription, description, image} = props.parameters;\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        title={title}\n      />\n      <CardMedia\n        className={classes.media}\n        image={image}\n        title={title}\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n           {shortDescription}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n          <Typography>\n            {price}\n          </Typography>\n        <IconButton aria-label=\"add to cart\">\n          <AddCircleIcon fontSize=\"large\" color=\"primary\" />\n        </IconButton>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography paragraph>\n             {description}\n          </Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}","export const pizzas = [{\n    title: 'pizza1',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '%PUBLIC_URL%/images/pizza.png'\n  },\n  {\n    title: 'pizza2',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '/images/pizza2.jpeg'\n  },\n  {\n    title: 'pizza2',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '/images/pizza2.jpeg'\n  },\n  {\n    title: 'pizza2',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '/images/pizza2.jpeg'\n  },\n  {\n    title: 'pizza2',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '/images/pizza2.jpeg'\n  },\n  {\n    title: 'pizza2',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '/images/pizza2.jpeg'\n  },\n  {\n    title: 'pizza2',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '/images/pizza2.jpeg'\n  },\n  {\n    title: 'pizza2',\n    price: '10$',\n    shortDescription: 'amazing pizza',\n    description: 'amazing pizza',\n    image: '/images/pizza2.jpeg'\n  },\n]","import React from 'react';\nimport styled from 'styled-components'\nimport { Grid } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\nimport FoodCard from '../FoodCard/FoodCard';\nimport { pizzas } from '../Data/Data';\n \n\nconst MenuStyle = styled.div`\npadding: 60px;\n`\n\nclass Menu extends React.Component{\n  render(){\n    return(\n      <MenuStyle>\n        <Typography variant=\"h2\" component=\"h1\">\n          Menu\n        </Typography>\n        <Grid container spacing={2}>\n          {pizzas.map((pizza) => {\n            return(\n              <Grid item>\n              <FoodCard  parameters={pizza}/>\n            </Grid> \n            )\n          })}    \n        </Grid>\n      </MenuStyle>\n    )\n  }\n}\n\nexport default Menu;","import React from 'react';\nimport { GlobalStyle } from './Styles/GlobalStyle'\nimport Navbar from './Navbar/Navbar';\nimport Menu from './Menu/Menu';\n\nfunction App() {\n  return (\n    <>\n    <GlobalStyle/>\n    <Navbar/>\n    <Menu/>\n   </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}